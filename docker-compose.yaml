version: "3.8"

networks:
  dev:
    driver: bridge

services:
  py-web:
    build: ./frontend
    container_name: py-web
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      BACKEND_URL: "http://go-api:5050/ai/binary/"
      STREAMLIT_SERVER_ADDRESS: "0.0.0.0"
    depends_on:
      - go-api
    networks:
      - dev

  go-api:
    build: ./backend
    container_name: go-api
    restart: unless-stopped
    environment: &envs
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      RABBITMQ_TASK_QUEUE: "task_q"
      REDIS_URL: "redis://redis:6379/0"
    ports:
      - "5050:5050"
    depends_on: &health
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev

  py-ml:
    build: ./ml
    restart: unless-stopped
    environment:
      <<: *envs
      WORKER_ID: ${HOSTNAME}
    depends_on:
      <<: *health
    networks:
      - dev

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - dev

  redis:
    image: redis:latest
    container_name: "redis"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - redis-data:/data
    networks:
      - dev

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - py-web
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
      - "/etc/letsencrypt:/etc/letsencrypt"
    networks:
      - dev

volumes:
  rabbitmq_data:
  redis-data:
